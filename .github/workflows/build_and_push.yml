# .github/workflows/build_and_push.yml
name: Build and Push Python Docker Image to Docker Hub (Manual Trigger)

on:
  workflow_dispatch: # 触发：仅允许手动启动
    inputs:
      version:
        description: '必须提供一个版本/标签 (例如 1.0.0 或 my-test-build)'
        required: true
        type: string
      update_latest:
        description: '是否也更新 latest 标签?'
        required: false
        type: boolean
        default: false # 默认不更新 latest

env:
  # !!! 镜像名已设置为 gcli2ali !!!
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/n2api

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 登录到 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤 3: 生成 Docker 镜像元数据 (标签和 Labels)
      - name: Extract metadata (tags and labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # 规则 1: 使用手动输入的版本号作为标签
            type=raw,value=${{ inputs.version }}
            # 规则 2: 如果手动触发时 update_latest=true, 则添加 'latest' 标签
            type=raw,value=latest,enable=${{ inputs.update_latest }}

      # 步骤 4: 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 5: 构建 Docker 镜像并推送到 Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: . # Docker 构建上下文为当前目录
          file: ./Dockerfile # 指定用于构建的 Dockerfile
          push: true # 推送到仓库
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
